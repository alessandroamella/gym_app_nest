generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  workouts      Workout[]
  pwHash        String
  points        Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deviceToken   String? // for push notifications
  profilePicKey String?
  profilePicUrl String?
  comments      Comment[]

  @@index([username]) // to speed up lookups by username
}

model WorkoutMedia {
  key       String   @id
  url       String   @unique
  mime      String
  workoutId Int
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workoutId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  workoutId Int
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workoutId])
  @@index([userId])
}

model Workout {
  id        Int            @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  points    Int
  notes     String?
  userId    Int
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  comments  Comment[]
  media     WorkoutMedia[]

  @@index([userId, createdAt]) // so we can query by user and date
}
