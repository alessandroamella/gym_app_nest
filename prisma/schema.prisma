generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int              @id @default(autoincrement())
  username     String           @unique
  workouts     Workout[]
  pwHash       String
  points       Int              @default(0)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  deviceToken  String? // for push notifications
  profilePicId String?          @unique
  profilePic   Media?           @relation(fields: [profilePicId], references: [key], onDelete: SetNull)
  comments     Comment[]
  posts        MotivationPost[]
  postLikes    PostLike[]

  @@index([username]) // to speed up lookups by username
}

enum MediaCategory {
  WORKOUT
  POST
  PROFILE_PIC
}

model Media {
  key       String          @id
  url       String          @unique
  category  MediaCategory
  mime      String
  needsAuth Boolean         @default(false)
  workoutId Int?
  workout   Workout?        @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  postId    Int?
  post      MotivationPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User?

  @@index([workoutId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  workoutId Int
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workoutId])
  @@index([userId])
}

model Workout {
  id        Int       @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  points    Int
  notes     String?
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isPublic  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  media     Media[]

  @@index([userId, createdAt]) // so we can query by user and date
}

model MotivationPost {
  id        Int        @id @default(autoincrement())
  text      String?
  userId    Int
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  media     Media[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  likes     PostLike[]

  @@index([userId, createdAt])
}

model PostLike {
  userId    Int
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    Int
  post      MotivationPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())

  @@id([userId, postId])
}
